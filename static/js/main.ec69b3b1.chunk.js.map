{"version":3,"sources":["components/styles/Global.ts","components/styles/Container.styled.ts","components/styles/NavBar.styled.ts","assets/images/logo.png","components/NavBar.tsx","components/styles/CategoryItem.styled.ts","components/CategoryItem.tsx","components/styles/Slider.styled.ts","pages/CategorySlider.tsx","components/styles/RecipeDetails.styled.ts","pages/RecipeDetails.tsx","components/styles/RecipeBox.styled.ts","components/RecipeBox.tsx","components/styles/Filter.styled.ts","components/Filter.tsx","pages/GetRecipes.tsx","components/styles/theme.ts","App.tsx","index.tsx"],"names":["GlobalStyles","createGlobalStyle","Container","styled","div","SliderContainer","RecipesContainer","theme","size","tablet","RecipesItemsContainer","Logo","img","mobileL","Form","form","colors","main","NavBar","setRecipeSearch","history","useHistory","to","src","logo","alt","onSubmit","e","preventDefault","formElements","currentTarget","elements","searchInput","value","push","action","type","id","placeholder","className","ImageContainer","CategoryItem","idCategory","strCategory","strCategoryThumb","href","StyledSlider","Slider","CategorySlider","useState","categories","setCategories","useEffect","a","fetch","result","json","data","console","log","fetchCategories","dots","infinite","accessibility","speed","autoplay","autoplaySpeed","slidesToShow","slidesToScroll","responsive","breakpoint","settings","length","map","category","Wrapper","ListContainer","ul","RecipeDetails","recipe","setRecipe","ingredients","setIngredients","useParams","meals","meal","ingredientsList","i","newIngredient","ingredient","measure","getIngredients","fetchRecipe","strMeal","strMealThumb","strInstructions","item","index","TextContainer","RecipeBox","idMeal","FilterContainer","FilterForm","FilterFormItems","Button","button","Filter","setFilterCategories","allCategories","setAllCategories","filter","setFilter","strArea","htmlFor","name","onChange","removeDuplicatesCategories","Set","handleSubmitInput","GetRecipes","recipeSearch","recipes","setRecipes","copyRecipes","setCopyRecipes","loading","setLoading","filterCategories","fetchUrl","setTimeout","fetchRecipes","filteredRecipes","filterAllCategories","flat","mobileM","App","basename","process","Global","exact","path","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ec69b3b1.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components';\r\n\r\nconst GlobalStyles = createGlobalStyle`\r\n\r\n  * {\r\n    box-sizing: border-box;\r\n    margin: 0;\r\n    padding: 0;\r\n    font-family: 'Poppins', sans-serif;\r\n    -webkit-font-smoothing: antialiased;\r\n    -moz-osx-font-smoothing: grayscale;\r\n  }\r\n`\r\n\r\nexport default GlobalStyles;\r\n","import styled from 'styled-components';\r\n\r\nexport const Container = styled.div`\r\n  width: 1000px;\r\n  max-width: 100%;\r\n  padding: 0 20px;\r\n  margin: 0 auto;\r\n`;\r\n\r\nexport const SliderContainer = styled.div`\r\n  position: relative;\r\n  max-width: 900px;\r\n  height: 320px;\r\n  margin: 0 auto;\r\n\r\n  h1 {\r\n    text-align: center;\r\n    margin: 40px auto;\r\n    font-size: 3rem;\r\n  }\r\n`;\r\n\r\nexport const RecipesContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  max-width: 1000px;\r\n  margin: 0 auto;\r\n\r\n  h1 {\r\n    margin: 40px 0 20px;\r\n    font-size: 3rem;\r\n  }\r\n  @media (max-width: ${({ theme }) => theme.size.tablet}) {\r\n    h1 {\r\n      font-size: 2.3rem;\r\n    }\r\n  } ;\r\n`;\r\n\r\nexport const RecipesItemsContainer = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr 1fr;\r\n  justify-content: center;\r\n\r\n  @media (max-width: 920px) {\r\n    grid-template-columns: 1fr 1fr;\r\n  }\r\n  @media (max-width: 600px) {\r\n    grid-template-columns: 1fr;\r\n  }\r\n`;\r\n","import styled from 'styled-components';\r\n\r\nexport const Container = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n  height: 65px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-around;\r\n  gap: 10px;\r\n  background-color: white;\r\n  padding: 0 60px;\r\n  box-shadow: 0 2px 6px 0 rgb(0 0 0 / 15%);\r\n\r\n  @media (max-width: ${({theme}) => theme.size.tablet}) {\r\n    padding: 0 5%;\r\n  };\r\n\r\n`;\r\n\r\nexport const Logo = styled.img`\r\n  height: 50px;\r\n\r\n  @media (max-width: ${({theme}) => theme.size.mobileL}) {\r\n    height: 40px;\r\n  };\r\n`;\r\n\r\nexport const Form = styled.form`\r\n  background-color: white;\r\n  min-width: 180px;\r\n  width: 400px;\r\n  height: 38px;\r\n  border-radius: 5px;\r\n  border: 1px grey solid;\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  margin-left: auto;\r\n\r\n  input {\r\n    color: grey;\r\n    height: 100%;\r\n    width: 100%;\r\n    padding: 6px 10px;\r\n    border: none;\r\n    font-size: 1rem;\r\n    border-radius: 5px;\r\n  }\r\n\r\n  input::placeholder {\r\n    color: grey;\r\n    opacity: 0.7;\r\n  }\r\n\r\n  button {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    background-color: transparent;\r\n    cursor: pointer;\r\n    width: 45px;\r\n    height: 100%;\r\n    border: none;\r\n    border-radius: 0 5px 5px 0;\r\n\r\n    &:hover {\r\n      background-color: ${({theme}) => theme.colors.main};\r\n      color: white;\r\n    }\r\n\r\n    .buttonIcon {\r\n      font-size: 30px;\r\n    }\r\n  }\r\n`;\r\n","export default __webpack_public_path__ + \"static/media/logo.9a3f42d6.png\";","import React from 'react';\r\nimport { useHistory, Link } from \"react-router-dom\";\r\nimport { Container, Logo, Form } from './styles/NavBar.styled';\r\nimport logo from '../assets/images/logo.png';\r\nimport { AiOutlineSearch } from 'react-icons/ai';\r\nimport { INavBar } from '../interfaces';\r\n\r\nconst NavBar = ({ setRecipeSearch }: INavBar) => {\r\n  let history = useHistory();\r\n\r\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    const form = e.currentTarget;\r\n    const formElements = form.elements as typeof form.elements & {\r\n      searchInput: { value: string };\r\n    };\r\n    setRecipeSearch(formElements.searchInput.value);\r\n    history.push('/search')\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Link to=\"/\">\r\n        <Logo src={logo} alt=\"logo\" />\r\n      </Link>\r\n\r\n      <Form onSubmit={handleSubmit} action=\"/search/\">\r\n        <input type=\"text\" id=\"searchInput\" placeholder=\"Find a recipe\" />\r\n        <button type=\"submit\">\r\n          <AiOutlineSearch className=\"buttonIcon\" />\r\n        </button>\r\n      </Form>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import styled from 'styled-components';\r\n\r\nexport const Container = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  background-color: white;\r\n\r\n  h2 {\r\n    text-align: center;\r\n    margin-bottom: 20px;\r\n  }\r\n\r\n  a {\r\n    text-decoration: none;\r\n    color: black;\r\n  }\r\n`;\r\n\r\nexport const ImageContainer = styled.div`\r\n  height: 230px;\r\n  width: 100%;\r\n  position: relative;\r\n\r\n  img {\r\n    height: 100%;\r\n    width: 100%;\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    object-fit: contain;\r\n    object-position: center;\r\n  }\r\n`;\r\n","import { ICategories } from '../interfaces';\r\nimport { Link } from 'react-router-dom';\r\nimport {Container, ImageContainer} from './styles/CategoryItem.styled'\r\n\r\nconst CategoryItem = ({\r\n  idCategory,\r\n  strCategory,\r\n  strCategoryThumb,\r\n}: ICategories): JSX.Element => {\r\n  return (\r\n    <Container>\r\n      <ImageContainer>\r\n        <Link to={`categories/${strCategory}`}>\r\n          <img src={strCategoryThumb} alt={strCategory} />\r\n        </Link>\r\n      </ImageContainer>\r\n      <a href={`categories/${strCategory}`}>\r\n        <h2>{strCategory}</h2>\r\n      </a>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default CategoryItem;\r\n","import Slider from 'react-slick';\r\nimport styled from 'styled-components'\r\n\r\nexport const StyledSlider = styled(Slider)`\r\n  .slick-next,\r\n  .slick-prev {\r\n    width: 50px;\r\n    height: 50px;\r\n    background-color: orange !important;\r\n    border-radius: 50%;\r\n    z-index: 99999;\r\n    top: 50%;\r\n    transform: translateY(-50%);\r\n    color: white;\r\n  }\r\n`;","import { useState, useEffect } from 'react';\r\nimport { ICategories } from '../interfaces';\r\nimport CategoryItem from '../components/CategoryItem';\r\nimport { SliderContainer } from '../components/styles/Container.styled';\r\nimport { StyledSlider } from '../components/styles/Slider.styled';\r\n\r\nconst CategorySlider = (): JSX.Element => {\r\n  const [categories, setCategories] = useState<ICategories[]>([]);\r\n\r\n  const settings = {\r\n    dots: true,\r\n    infinite: true,\r\n    accessibility: true,\r\n    speed: 500,\r\n    autoplay: true,\r\n    autoplaySpeed: 3000,\r\n    slidesToShow: 4,\r\n    slidesToScroll: 1,\r\n    responsive: [\r\n      {\r\n        breakpoint: 950,\r\n        settings: {\r\n          slidesToShow: 3,\r\n        },\r\n      },\r\n      {\r\n        breakpoint: 650,\r\n        settings: {\r\n          slidesToShow: 2,\r\n        },\r\n      },\r\n      {\r\n        breakpoint: 400,\r\n        settings: {\r\n          slidesToShow: 1,\r\n        },\r\n      },\r\n    ],\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchCategories = async (): Promise<void> => {\r\n      try {\r\n        const result = await fetch(\r\n          'https://www.themealdb.com/api/json/v1/1/categories.php'\r\n        );\r\n        const data = await result.json();\r\n        setCategories(data.categories);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    };\r\n    fetchCategories();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <SliderContainer>\r\n      <h1>Categories</h1>\r\n        <StyledSlider {...settings}>\r\n          {categories.length &&\r\n            categories.map((category) => {\r\n              return <CategoryItem key={category.idCategory} {...category} />;\r\n            })}\r\n        </StyledSlider>\r\n      </SliderContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CategorySlider;\r\n","import styled from 'styled-components';\r\n\r\nexport const Container = styled.div`\r\n  width: 1000px;\r\n  max-width: 100%;\r\n  padding: 0 20px;\r\n  margin: 0 auto;\r\n\r\n  h2 {\r\n    font-size: 2rem;\r\n    margin: 25px 0 5px;\r\n  }\r\n\r\n  p {\r\n    padding: 30px 0;\r\n  }\r\n`;\r\n\r\nexport const Wrapper = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: space-between;\r\n`;\r\n\r\nexport const ImageContainer = styled.div`\r\n  height: 400px;\r\n  width: 48%;\r\n  position: relative;\r\n  margin: 15px 0;\r\n \r\n  img {\r\n    height: 100%;\r\n    width: 100%;\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    object-fit: contain;\r\n    object-position: center;\r\n  }\r\n\r\n  @media (max-width: ${({theme}) => theme.size.tablet}) {\r\n    width: 100%;\r\n  };\r\n`;\r\n\r\nexport const ListContainer = styled.ul`\r\n  width: 48%;\r\n  list-style: none;\r\n  font-size: 1.3rem;\r\n\r\n  li {\r\n    border-bottom: 1px solid #DADADA;\r\n    margin: 2px 0;\r\n  }\r\n\r\n  @media (max-width: ${({theme}) => theme.size.tablet}) {\r\n    width: 100%;\r\n  };\r\n`;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport {\r\n  Container,\r\n  Wrapper,\r\n  ImageContainer,\r\n  ListContainer,\r\n} from '../components/styles/RecipeDetails.styled';\r\nimport { IRecipe, IIngredients } from '../interfaces';\r\n\r\nconst RecipeDetails = () => {\r\n  const [recipe, setRecipe] = useState<IRecipe>({} as IRecipe);\r\n  const [ingredients, setIngredients] = useState<IIngredients[]>([]);\r\n  const { id } = useParams<{ id: string }>();\r\n\r\n  useEffect(() => {\r\n    const fetchRecipe = async (): Promise<void> => {\r\n      try {\r\n        const result = await fetch(\r\n          `https://www.themealdb.com/api/json/v1/1/lookup.php?i=${id}`\r\n        );\r\n        const data = await result.json();\r\n        setRecipe(data.meals[0]);\r\n\r\n        const getIngredients = (meal: IRecipe) => {\r\n          const ingredientsList: IIngredients[] = [];\r\n          for (let i = 1; i <= 10; i++) {\r\n            if (meal[`strIngredient${i}`]) {\r\n              let newIngredient: IIngredients = {\r\n                ingredient: meal[`strIngredient${i}`],\r\n                measure: meal[`strMeasure${i}`],\r\n              };\r\n              ingredientsList.push(newIngredient);\r\n            } else {\r\n              break;\r\n            }\r\n          }\r\n          setIngredients(ingredientsList);\r\n        };\r\n        getIngredients(recipe);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    };\r\n    fetchRecipe();\r\n  }, [id, recipe]);\r\n\r\n  const { strMeal, strMealThumb, strInstructions } = recipe;\r\n  return (\r\n    <Container>\r\n      <h2>{strMeal}</h2>\r\n      <Wrapper>\r\n        <ImageContainer>\r\n          <img src={strMealThumb} alt={strMeal} />\r\n        </ImageContainer>\r\n        <ListContainer>\r\n          {ingredients.map((item, index) => {\r\n            const { ingredient, measure } = item;\r\n            return (\r\n              <li key={index}>\r\n                {ingredient} - {measure}\r\n              </li>\r\n            );\r\n          })}\r\n        </ListContainer>\r\n      </Wrapper>\r\n      <p>{strInstructions}</p>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default RecipeDetails;\r\n","import styled from 'styled-components';\r\n\r\nexport const Container = styled.div`\r\n  width: 270px;\r\n  border: 1px solid grey;\r\n  display: flex;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  flex-wrap: wrap;\r\n  margin: 20px;\r\n`;\r\n\r\nexport const ImageContainer = styled.div`\r\n  height: 200px;\r\n  width: 100%;\r\n  position: relative;\r\n  justify-self: flex-start;\r\n  align-self: flex-start;\r\n\r\n  img {\r\n    height: 100%;\r\n    width: 100%;\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    object-fit: cover;\r\n    object-position: center;\r\n  }\r\n`;\r\n\r\nexport const TextContainer = styled.div`\r\n  width: 100%;\r\n  padding: 15px;\r\n\r\n  a {\r\n    text-decoration: none;\r\n    color: black;\r\n    font-size: 0.8rem;\r\n    font-weight: 300;\r\n  }\r\n`;","import { IRecipes } from '../interfaces';\r\nimport { Link} from 'react-router-dom';\r\nimport {Container, ImageContainer, TextContainer} from './styles/RecipeBox.styled'\r\n\r\nconst RecipeBox = ({ idMeal, strMealThumb, strMeal }: IRecipes) => {\r\n  return (\r\n    <Container>\r\n      <ImageContainer>\r\n        <Link to={`recipe/${idMeal}`}>\r\n          <img src={strMealThumb} alt={strMeal} />\r\n        </Link>\r\n      </ImageContainer>\r\n      <TextContainer>\r\n        <Link to={`recipe/${idMeal}`}>\r\n          <h2>{strMeal}</h2>\r\n        </Link>\r\n      </TextContainer>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default RecipeBox;\r\n","import styled from 'styled-components';\r\n\r\nexport const FilterContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 100%;\r\n  padding: 5px;\r\n  margin: 0 auto;\r\n  border: 1px solid grey;\r\n`;\r\n\r\nexport const FilterForm = styled.form`\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nexport const FilterFormItems = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  align-items: center;\r\n  width: 100%;\r\n\r\n  div {\r\n    padding: 4px 6px;\r\n\r\n    label {\r\n      padding-right: 3px;\r\n    }\r\n  }\r\n\r\n  @media (max-width:${({theme}) => theme.size.tablet}) {\r\n    font-size: 0.8rem;\r\n  }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  width: 85px;\r\n  height: 35px;\r\n  font-size: 1.1rem;\r\n  background-color: orange;\r\n  color: white;\r\n  border: none;\r\n  cursor: pointer;\r\n  margin: 4px 6px;\r\n\r\n  &:hover {\r\n    opacity: 0.9;\r\n  }\r\n`;\r\n","import React, { useEffect, useState } from 'react';\r\nimport {\r\n  Button,\r\n  FilterContainer,\r\n  FilterForm,\r\n  FilterFormItems,\r\n} from '../components/styles/Filter.styled';\r\nimport { IFilter } from '../interfaces';\r\n\r\nconst Filter = ({ setFilterCategories }: IFilter) => {\r\n  const [allCategories, setAllCategories] = useState([]);\r\n  const [filter, setFilter] = useState<string[]>([]);\r\n\r\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    setFilterCategories(filter);\r\n  };\r\n\r\n  const handleSubmitInput = (item: any) => {\r\n    const { strArea } = item;\r\n    const removeDuplicatesCategories = [...new Set([...filter, strArea])];\r\n    setFilter(removeDuplicatesCategories);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchCategories = async (): Promise<void> => {\r\n      try {\r\n        const result = await fetch(\r\n          'https://www.themealdb.com/api/json/v1/1/list.php?a=list'\r\n        );\r\n        const data = await result.json();\r\n        setAllCategories(data.meals);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    };\r\n    fetchCategories();\r\n  }, []);\r\n\r\n  return (\r\n    <FilterContainer>\r\n      <FilterForm onSubmit={handleSubmit}>\r\n        <FilterFormItems>\r\n          {allCategories.map((category) => {\r\n            const { strArea } = category;\r\n            return (\r\n              <div key={strArea}>\r\n                <label htmlFor={strArea}>{strArea}</label>\r\n                <input\r\n                  type=\"checkbox\"\r\n                  id={strArea}\r\n                  name=\"interest\"\r\n                  value={strArea}\r\n                  onChange={() => handleSubmitInput({ strArea })}\r\n                />\r\n              </div>\r\n            );\r\n          })}\r\n        </FilterFormItems>\r\n        <Button type=\"submit\">Filter</Button>\r\n      </FilterForm>\r\n    </FilterContainer>\r\n  );\r\n};\r\n\r\nexport default Filter;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { IRecipes } from '../interfaces';\r\nimport RecipeBox from '../components/RecipeBox';\r\nimport {\r\n  RecipesContainer,\r\n  RecipesItemsContainer,\r\n} from '../components/styles/Container.styled';\r\nimport Filter from '../components/Filter';\r\n\r\nconst GetRecipes = ({\r\n  recipeSearch,\r\n}: {\r\n  recipeSearch: string;\r\n}) => {\r\n  const [recipes, setRecipes] = useState<IRecipes[]>([]);\r\n  const [copyRecipes, setCopyRecipes] = useState<IRecipes[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [filterCategories, setFilterCategories] = useState<string[]>([]);\r\n  const { id } = useParams<{ id: string }>();\r\n\r\n  useEffect(() => {\r\n    setRecipes([]);\r\n    setCopyRecipes([])\r\n    setLoading(true);\r\n\r\n    const fetchRecipes = async (): Promise<void> => {\r\n      try {\r\n        const fetchUrl = (): string => {\r\n          if (id) {\r\n            return `https://www.themealdb.com/api/json/v1/1/filter.php?c=${id}`;\r\n          } else {\r\n            return `https://www.themealdb.com/api/json/v1/1/search.php?s=${recipeSearch}`;\r\n          }\r\n        };\r\n\r\n        const result = await fetch(fetchUrl());\r\n        const data = await result.json();\r\n        setTimeout(() => {\r\n          setRecipes(data.meals);\r\n          setCopyRecipes(data.meals)\r\n          setLoading(false);\r\n        }, 500);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    };\r\n    fetchRecipes();\r\n  }, [recipeSearch, id]);\r\n\r\n  useEffect(() => {\r\n    let filteredRecipes = [];\r\n    for (let i = 0; i < filterCategories.length; i++) {\r\n      let filterAllCategories = recipes.filter(\r\n        (recipe) => recipe.strArea === filterCategories[i]\r\n      );\r\n      filterAllCategories.length && filteredRecipes.push(filterAllCategories.flat());\r\n    }\r\n    setCopyRecipes(filteredRecipes.flat())\r\n  }, [filterCategories]);\r\n\r\n  return (\r\n    <>\r\n      <RecipesContainer>\r\n        {loading && <h1>Loading...</h1>}\r\n        {!recipes && <h1>Can't find any recipes for {recipeSearch}</h1>}\r\n        {!id && !loading && recipes && (\r\n          <h1>Search result for {recipeSearch}</h1>\r\n        )}\r\n        {id && !loading && <h1>{id}</h1>}\r\n\r\n        {recipes && !loading && (\r\n          <>\r\n            {!id && <Filter setFilterCategories={setFilterCategories} />}\r\n            <RecipesItemsContainer>\r\n              {copyRecipes.map((recipe) => {\r\n                return <RecipeBox key={recipe.idMeal} {...recipe} />;\r\n              })}\r\n            </RecipesItemsContainer>{' '}\r\n          </>\r\n        )}\r\n      </RecipesContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GetRecipes;\r\n","const theme = {\r\n  colors: {\r\n    main: 'orange',\r\n  },\r\n  size: {\r\n    mobileM: '375px',\r\n    mobileL: '425px',\r\n    tablet: '768px',\r\n  },\r\n};\r\n\r\nexport default theme;","import { useState } from 'react';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport { ThemeProvider } from 'styled-components';\r\nimport GlobalStyles from './components/styles/Global';\r\nimport { Container } from './components/styles/Container.styled';\r\nimport NavBar from './components/NavBar';\r\nimport CategorySlider from './pages/CategorySlider';\r\nimport RecipeDetails from './pages/RecipeDetails';\r\nimport GetRecipes from './pages/GetRecipes';\r\nimport theme from './components/styles/theme'\r\n\r\nfunction App() {\r\n  const [recipeSearch, setRecipeSearch] = useState('');\r\n\r\n  return (\r\n    <Router basename={process.env.PUBLIC_URL}>\r\n      <ThemeProvider theme={theme}>\r\n        <GlobalStyles />\r\n        <NavBar setRecipeSearch={setRecipeSearch} />\r\n        <Switch>\r\n          <Container>\r\n            <Route exact path=\"/\" component={CategorySlider} />\r\n            <Route exact path=\"/categories/:id\" component={GetRecipes} />\r\n            <Route exact path=\"/recipe/:id\" component={RecipeDetails} />\r\n            <Route\r\n              exact\r\n              path=\"/categories/recipe/:id\"\r\n              component={RecipeDetails}\r\n            />\r\n            <Route path=\"/search\">\r\n              <GetRecipes recipeSearch={recipeSearch} />\r\n            </Route>\r\n          </Container>\r\n        </Switch>\r\n      </ThemeProvider>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}